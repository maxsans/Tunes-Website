name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: tunes-website
  DOCKER_TAG: ${{ github.sha }}

jobs:
  # CI step - Tests and Build
  continuous-integration:
    name: CI - Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run linter
        run: npm run lint --if-present

      - name: 🧪 Run tests
        run: npm test --if-present -- --coverage --watchAll=false --passWithNoTests

      - name: 🏗️ Build application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 1

  # CD step - Docker Build and Deploy
  continuous-deployment:
    name: CD - Docker & Deploy
    runs-on: ubuntu-latest
    needs: continuous-integration
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "🚀 Starting deployment process..."

            # Create deployment directory
            mkdir -p ~/deployments/tunes-website
            cd ~/deployments/tunes-website

            # Download docker-compose files
            echo "📥 Downloading docker-compose configuration..."
            curl -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.prod.yml \
                 -L "https://api.github.com/repos/${{ github.repository }}/contents/docker/docker-compose.prod.yml"
                 
            curl -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.fallback.yml \
                 -L "https://api.github.com/repos/${{ github.repository }}/contents/docker/docker-compose.fallback.yml"

            # Ensure proxy network exists
            echo "🌐 Checking proxy network..."
            docker network create proxy-net 2>/dev/null || echo "Network proxy-net already exists"

            # Stop existing container gracefully
            echo "🛑 Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down --timeout 30 || echo "No existing containers to stop"

            # Pull latest image
            echo "📦 Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest

            # Start new container with production config
            echo "🐳 Starting new containers..."
            if DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} DOCKER_IMAGE=${{ env.DOCKER_IMAGE }} docker-compose -f docker-compose.prod.yml up -d; then
              echo "✅ Started with proxy network"
              COMPOSE_FILE="docker-compose.prod.yml"
            else
              echo "⚠️ Proxy network failed, trying fallback..."
              DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} DOCKER_IMAGE=${{ env.DOCKER_IMAGE }} docker-compose -f docker-compose.fallback.yml up -d
              COMPOSE_FILE="docker-compose.fallback.yml"
            fi

            # Wait for container to be ready
            echo "⏳ Waiting for application to start..."
            sleep 20

            # Verify deployment
            if docker-compose -f $COMPOSE_FILE ps | grep -q "Up"; then
              echo "✅ Deployment successful!"
              if [ "$COMPOSE_FILE" = "docker-compose.prod.yml" ]; then
                echo "🌐 Application is running in proxy network"
              else
                echo "🌐 Application is running on port 8088"
              fi
              
              # Test health endpoint via container
              if docker exec tunes-website wget --spider -q http://localhost/; then
                echo "💚 Health check passed!"
              else
                echo "⚠️ Health check failed, but container is running"
              fi
              
              # Show container status
              echo "📊 Container status:"
              docker-compose -f $COMPOSE_FILE ps
            else
              echo "❌ Deployment failed!"
              echo "📋 Container logs:"
              docker-compose -f $COMPOSE_FILE logs --tail 50
              exit 1
            fi

            # Cleanup old images
            echo "🧹 Cleaning up old images..."
            docker image prune -f

            echo "🎉 Deployment completed successfully!"

      - name: 📢 Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to production server completed successfully!"
            echo "🌐 Application is live at https://tunes-app.com"
          else
            echo "❌ Deployment failed. Please check the logs above."
          fi
